<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode 10. Regular Expression Matching</title>
    <url>/2020/05/05/leetcode-10-regular-expression-matching/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given an input string (s) and a pattern (p), implement regular expression matching with support for &#39;.&#39; and &#39;*&#39;.</span><br><span class="line"></span><br><span class="line">&#39;.&#39; Matches any single character.</span><br><span class="line">&#39;*&#39; Matches zero or more of the preceding element.</span><br><span class="line">The matching should cover the entire input string (not partial).</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">s could be empty and contains only lowercase letters a-z.</span><br><span class="line">p could be empty and contains only lowercase letters a-z, and characters like . or *.</span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;ab&quot;</span><br><span class="line">p &#x3D; &quot;.*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.</span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aab&quot;</span><br><span class="line">p &#x3D; &quot;c*a*b&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.</span><br><span class="line">Example 5:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;mississippi&quot;</span><br><span class="line">p &#x3D; &quot;mis*is*p*.&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p>题目要求实现一个只支持* 和 . 的正则表达式判定函数</p>
<p>解题思路: 建立一个NFA 然后直接模拟</p>
<ol>
<li>对于非*字符，建立一个新的状态 连一条边</li>
<li>对于<em>字符，连一条到自己的边 （字符为</em>之前的那一个字符)</li>
<li><strong>重要</strong> 由于*可以匹配 0个字符， 需要连一条【之前状态】 到 【现在状态】 【不消耗字符】的边。</li>
<li>然后记录下当前状态 暴力转移即可,复杂度最坏O(n*m)</li>
</ol>
<h4 id="非常挫的实现（大佬勿喷）-56-ms"><a href="#非常挫的实现（大佬勿喷）-56-ms" class="headerlink" title="非常挫的实现（大佬勿喷）  (56 ms):"></a>非常挫的实现（大佬勿喷）  (56 ms):</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.next = defaultdict(list)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_next</span><span class="params">(self,c)</span>:</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">if</span> c==<span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.next[c]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">in</span> self.next:</span><br><span class="line">            ret.extend(self.next[<span class="string">'.'</span>])</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> self.next:</span><br><span class="line">            ret.extend(self.next[c])</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> s</span><br><span class="line">        start_state = State()</span><br><span class="line">        </span><br><span class="line">        now_state = start_state</span><br><span class="line">        prev_state = start_state</span><br><span class="line">        <span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(p):</span><br><span class="line">            next_state = State()</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">'*'</span>:</span><br><span class="line">                pc = p[i<span class="number">-1</span>]</span><br><span class="line">                now_state.next[pc].append(now_state)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i!=<span class="number">0</span> <span class="keyword">and</span> p[i<span class="number">-1</span>]==<span class="string">'*'</span>:</span><br><span class="line">                    prev_state.next[<span class="string">'*'</span>].append(now_state)</span><br><span class="line">                now_state.next[c].append(next_state)</span><br><span class="line"></span><br><span class="line">                prev_state = now_state</span><br><span class="line">                now_state = next_state</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> p[<span class="number">-1</span>] == <span class="string">'*'</span>:</span><br><span class="line">            prev_state.next[<span class="string">'*'</span>].append(now_state)</span><br><span class="line">        </span><br><span class="line">        last_state = now_state</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">void_transition</span><span class="params">(states)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> states:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            ret = []</span><br><span class="line">            <span class="keyword">for</span> st <span class="keyword">in</span> states:</span><br><span class="line">                <span class="keyword">for</span> nxt <span class="keyword">in</span> st.get_next(<span class="string">'*'</span>):</span><br><span class="line">                    ret.append(nxt)</span><br><span class="line">            ret.extend(void_transition(ret))</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        states = [start_state]</span><br><span class="line">        states.extend(void_transition(states))</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            new_states = []</span><br><span class="line">            <span class="keyword">for</span> st <span class="keyword">in</span> states:</span><br><span class="line">                new_states.extend(st.get_next(c))</span><br><span class="line">            new_states.extend(void_transition(new_states))</span><br><span class="line">            new_states= list(set(new_states))</span><br><span class="line">            states = new_states</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> any(st == last_state <span class="keyword">for</span> st <span class="keyword">in</span> states)</span><br></pre></td></tr></table></figure>

<p>思路2：DP 比较简单  <a href="https://www.youtube.com/watch?v=l3hda49XcDE&list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr&index=15&t=0s" target="_blank" rel="noopener">参考youtube视频</a></p>
<p>dp[i][j] 表示s[:i] 和 p[:j] 是否匹配</p>
<ol>
<li>dp[0][0] = 0</li>
<li>dp[i][j] = dp[i-1][j-1]  if s[i] == p[j] or p[j] ==’.’ 单字符匹配</li>
<li>dp[i][j] = dp[i][j-2]  if p[j]==’*’ 星号部分完全省略 </li>
<li>dp[i][j] = dp[i-1][j]  if p[j]==’*’ and s[i] == p[j-1] 星号部分重复至少一次</li>
<li>答案是dp[n][m]</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> s</span><br><span class="line"></span><br><span class="line">        n = len(s)</span><br><span class="line">        m = len(p)</span><br><span class="line">        dp = [[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>]==<span class="string">'*'</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] |= dp[<span class="number">0</span>][j<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> s[i<span class="number">-1</span>] == p[j<span class="number">-1</span>] <span class="keyword">or</span> p[j<span class="number">-1</span>] == <span class="string">'.'</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-2</span>] <span class="comment">#match 0 times</span></span><br><span class="line">                    <span class="keyword">if</span> s[i<span class="number">-1</span>] == p[j<span class="number">-1</span><span class="number">-1</span>] <span class="keyword">or</span> p[j<span class="number">-1</span><span class="number">-1</span>] == <span class="string">'.'</span>:</span><br><span class="line">                        <span class="comment">#match one or more times</span></span><br><span class="line">                        dp[i][j] |= dp[i<span class="number">-1</span>][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> bool(dp[n][m])</span><br></pre></td></tr></table></figure>
<h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h2><h2 id="LeetCode-44-Wildcard-Matching"><a href="#LeetCode-44-Wildcard-Matching" class="headerlink" title="LeetCode 44. Wildcard Matching"></a>LeetCode 44. Wildcard Matching</h2><p>用同样的思路可以直接秒掉更简单版本的44题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for &#39;?&#39; and &#39;*&#39;.</span><br><span class="line"></span><br><span class="line">&#39;?&#39; Matches any single character.</span><br><span class="line">&#39;*&#39; Matches any sequence of characters (including the empty sequence).</span><br><span class="line">The matching should cover the entire input string (not partial).</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">s could be empty and contains only lowercase letters a-z.</span><br><span class="line">p could be empty and contains only lowercase letters a-z, and characters like ? or *.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> s</span><br><span class="line"></span><br><span class="line">        n = len(s)</span><br><span class="line">        m = len(p)</span><br><span class="line">        dp = [[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> s[i<span class="number">-1</span>] == p[j<span class="number">-1</span>] <span class="keyword">or</span> p[j<span class="number">-1</span>] == <span class="string">'?'</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>] <span class="comment">#match 0 times</span></span><br><span class="line">                    dp[i][j] |= dp[i<span class="number">-1</span>][j] <span class="comment">#match 1+ times</span></span><br><span class="line">        <span class="keyword">return</span> bool(dp[n][m])</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>dp</tag>
      </tags>
  </entry>
</search>
